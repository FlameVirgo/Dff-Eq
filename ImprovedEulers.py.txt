# Importing sympy library for symbolic computation
# and time module for measuring execution time
from sympy import *
import time

"""
Name: Sachin Letchumanan
Date: 03/12/2024
Description: Simulate Improved Euler's (Heun's) Method
"""

# Define the Improved Euler's method (Heun's method)
def ImpEulers(diffEq, x0, y0, step, xf):
    x = Symbol("x")
    y = Symbol("y")
    
    # Calculate number of iterations
    iterations = int((xf - x0) / step)
    
    # Start measuring execution time
    start_time = time.time()
    
    # Main loop for Improved Euler's method
    for i in range(iterations):
        m = diffEq.subs({x: x0, y: y0})                                                       # use differential equation to find slope at x0 , y0
        y0 += (step / 2) * (m + diffEq.subs({x: x0 + step, y: y0 + m * step})).evalf()         # approx the next y using 
        x0 += step
    
    # End measuring execution time
    end_time = time.time()
    
    # Return result and time taken
    return y0, end_time - start_time

# Test Case
x = Symbol("x")
y = Symbol("y")
diffEq = 2 * x * y
x0 = 1
y0 = 1
step = 0.1
xf = 1.5
result, time_taken = ImpEulers(diffEq, x0, y0, step, xf)
print("Result:", result)
print("Time taken:", time_taken, "seconds")

# Importing sympy library for symbolic computation
# and math module for mathematical functions
from sympy import *
import math

"""
Name: Sachin Letchumanan
Date: 03/14/2024
Description: Euler's Method with an Error Analysis
"""

# Header for the table
print("{:<10} {:<10} {:<15} {:<10}".format("x", "y", "Real Value", "Absolute Error"))

# Defining Euler's method function with error analysis
def EulersWithErrorAnalysis(diffEq, x0, y0, step, xf, solToDiffEq):
    x = Symbol("x") 
    y = Symbol("y")
    
    # Calculating the number of iterations
    iterations = int((xf - x0) / step)
    
    # Iterating through the range of iterations
    for i in range(iterations + 1):
        # Printing current values of x and y
        print("{:<10}".format(round(x0, 4)), end=" ")
        print("{:<10}".format(round(y0, 4)), end=" ")
        
        # Calculating slope at (x0, y0)
        m = diffEq.subs({x: x0, y: y0})
        
        # Computing the actual value of y
        y_actual = solToDiffEq.subs({x: x0})
        
        # Calculating absolute error
        absError = abs(y_actual - y0)
        
        # Updating y using Euler's method
        y0 = m * step + y0
        
        # Printing real value and absolute error
        print("{:<15}".format(round(float(y_actual), 4)), end=" ")
        print(round(absError, 4), end=" ")
        print() 
        
        # Updating x for the next iteration
        x0 += step
    
    return y0

# Test Case
x = Symbol("x")
y = Symbol("y")
diffEq = 2 * x * y                        
solToDiffEq = (math.e) ** (x ** 2 - 1)
x0 = 1.0
y0 = 1.0
step = 0.05
xf = 1.5

result = EulersWithErrorAnalysis(diffEq, x0, y0, step, xf, solToDiffEq)

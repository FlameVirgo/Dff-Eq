# Runge-Kutta 4th Order (RK4) Method with Error Analysis
# Author: Sachin Letchumanan
# Date: 03/21/2024

# Importing required libraries
from sympy import *
import math

# Printing headers for the table
print("{:<10} {:<10} {:<15} {:<10}".format("x", "y", "Real Value", "Absolute Error"))

# Defining RK4 with error analysis function
def RK4WithErrorAnalysis(diffEq, x0, y0, step, xf, solToDiffEq):
    # Declaring symbols
    x = Symbol("x")
    y = Symbol("y")
    
    # Calculating the number of iterations
    iterations = int((xf - x0) / step)
    
    # Iterating through the range of iterations
    for i in range(iterations + 1):
        # Printing current values of x and y
        print("{:<10}".format(round(x0, 12)), end=" ")
        print("{:<10}".format(round(y0, 12)), end=" ")
        
        # Calculating k1, k2, k3, and k4
        k1 = diffEq.subs({x: x0, y: y0})
        k2 = diffEq.subs({x: x0 + (step / 2), y: y0 + step * (k1 / 2)})
        k3 = diffEq.subs({x: x0 + (step / 2), y: y0 + step * (k2 / 2)})
        k4 = diffEq.subs({x: x0 + step, y: y0 + step * k3})
        
        # Computing the actual value of y
        y_actual = solToDiffEq.subs({x: x0})
        
        # Calculating absolute error
        absError = abs(y_actual - y0)
        
        # Approximating the next y using RK4
        y0 += (step / 6) * (k1 + 2 * k2 + 2 * k3 + k4)
        
        # Printing real value and absolute error
        print("{:<15}".format(round(float(y_actual), 12)), end=" ")
        print(round(absError, 12), end=" ")
        print()
        
        # Updating x for the next iteration
        x0 += step
    
    return y0

# Test Case
x = Symbol("x")
y = Symbol("y")
diffEq = 2 * x * y
solToDiffEq = (math.e) ** (x ** 2 - 1)
x0 = 1.0
y0 = 1.0
step = 0.025
xf = 1.5

result = RK4WithErrorAnalysis(diffEq, x0, y0, step, xf, solToDiffEq)

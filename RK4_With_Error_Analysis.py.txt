from sympy import *
import math

"""
Name: Sachin Letchumanan
Date: 03/21/2024
Description: RK4 with an Error Analysis
"""

print("{:<10} {:<10} {:<15} {:<10}".format("x", "y", "Real Value", "Absolute Error"))                # Header
def RK4WithErrorAnalysis(diffEq, x0, y0, step, xf, solToDiffEq):
    x = Symbol("x") 
    y = Symbol("y")
    iterations = int((xf - x0) / step)                                                               # How long it will take to get from x0 to xf given a step size 
    for i in range(iterations + 1):                                                                  # the +1 ensures it goes until the very last iteration
        print("{:<10}".format(round(x0, 8)), end = " ")                                              # indent
        print("{:<10}".format(round(y0, 8)), end = " ")
        k1 = diffEq.subs({x: x0, y: y0})                                                             # k1
        k2 = diffEq.subs({x: x0 + (step / 2) , y: y0 + step * (k1 / 2)})                             # k2
        k3 = diffEq.subs({x: x0 + (step / 2) , y: y0 + step * (k2 / 2)})                             # k3
        k4 = diffEq.subs({x: x0 + step, y: y0 + step * (k3)})                                        # k4
        y_actual = solToDiffEq.subs({x: x0})                                                         # real value of the function at x0 
        absError = abs(y_actual - y0)                                                                # error between real value and RK4's approximated value
        y0 += (step/6) * (k1 + 2*k2 + 2*k3 + k4)
        print("{:<15}".format(round(float(y_actual), 8)) , end = " ")                                # indent
        print(round(absError, 8), end = " ")
        print() 
        x0 += step                                                                                   # updates x for the next iteration
    return y0

# Test Case

x = Symbol("x")
y = Symbol("y")
diffEq = 2*x*y
solToDiffEq = (math.e)**(x**2 - 1)                                                                   # required solution to diff eq to find real value
x0 = 1.0
y0 = 1.0
step = 0.1
xf = 1.5


result = RK4WithErrorAnalysis(diffEq, x0, y0, step, xf, solToDiffEq)

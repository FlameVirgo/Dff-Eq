# Importing sympy library for symbolic computation
# and time module for measuring execution time
from sympy import *
import time

"""
Name: Sachin Letchumanan
Date: 03/18/2024
Description: RK4 Simulation
"""

# Define the RK4 method for solving differential equations
def RK4(diffEq, x0, y0, step, xf):
    x = Symbol("x")
    y = Symbol("y")
    
    # Calculate number of iterations
    iterations = int((xf - x0) / step)
    
    # Start measuring execution time
    start_time = time.time()
    
    # Main loop for RK4 method
    for i in range(iterations):
        k1 = diffEq.subs({x: x0, y: y0})                                   # k1
        k2 = diffEq.subs({x: x0 + (step / 2), y: y0 + step * (k1 / 2)})    # k2 
        k3 = diffEq.subs({x: x0 + (step / 2), y: y0 + step * (k2 / 2)})    # k3 
        k4 = diffEq.subs({x: x0 + step, y: y0 + step * k3})                # k4
        y0 += (step / 6) * (k1 + 2 * k2 + 2 * k3 + k4)                     # update y0 
        x0 += step                                                        # increment x0 by step for next iteration
    
    # End measuring execution time
    end_time = time.time()
    
    # Return result and time taken
    return y0, end_time - start_time

# Test Case
x = Symbol("x")
y = Symbol("y")
diffEq = 2 * x * y
x0 = 1
y0 = 1
step = 0.1
xf = 1.5
result, time_taken = RK4(diffEq, x0, y0, step, xf)
print("Result:", result)
print("Time taken:", time_taken, "seconds")
